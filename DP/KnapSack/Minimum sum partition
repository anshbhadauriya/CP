Recursive->


class Solution {
public:
    int solve(int i, int currSum, int totalSum, vector<int>& arr) {
        if (i == arr.size()) {
            return abs(totalSum - 2 * currSum);
        }

        return min(
            solve(i + 1, currSum + arr[i], totalSum, arr),
            solve(i + 1, currSum, totalSum, arr)
        );
    }

    int minDifference(vector<int>& arr) {
        int totalSum = 0;
        for (int x : arr) totalSum += x;

        return solve(0, 0, totalSum, arr);
    }
};



class Solution {
public:
    int solve(int i, int currSum, int totalSum, vector<int>& arr, vector<vector<int>>& dp) {
        if (i == arr.size()) {
            return abs(totalSum - 2 * currSum);
        }

        if (dp[i][currSum] != -1) return dp[i][currSum];

        return dp[i][currSum] = min(
            solve(i + 1, currSum + arr[i], totalSum, arr, dp),
            solve(i + 1, currSum, totalSum, arr, dp)
        );
    }

    int minDifference(vector<int>& arr) {
        int totalSum = 0;
        for (int x : arr) totalSum += x;

        vector<vector<int>> dp(arr.size(), vector<int>(totalSum + 1, -1));
        return solve(0, 0, totalSum, arr, dp);
    }
};



