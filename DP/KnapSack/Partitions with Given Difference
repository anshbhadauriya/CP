Recursive->


class Solution {
public:
    void solve(vector<int>& arr, int target, int i, int &count) {
        if (i == arr.size()) {
            if (target == 0) count++;
            return;
        }

        if (arr[i] <= target) {
            solve(arr, target - arr[i], i + 1, count);
        }

        solve(arr, target, i + 1, count);
    }

    int countPartitions(vector<int>& arr, int d) {
        int total = accumulate(arr.begin(), arr.end(), 0);

        if ((total + d) % 2 != 0 || total < d) return 0;

        int target = (total + d) / 2;
        int count = 0;
        solve(arr, target, 0, count);
        return count;
    }
};


Memoized->

class Solution {
public:
    int solve(vector<int>& arr, int target, int i, vector<vector<int>>& dp) {
        if (i == arr.size()) {
            if (target == 0) return 1;
            return 0;
        }

        if (dp[i][target] != -1) return dp[i][target];

        int take = 0;
        if (arr[i] <= target) take = solve(arr, target - arr[i], i + 1, dp);

        int skip = solve(arr, target, i + 1, dp);

        dp[i][target] = take + skip;
        return dp[i][target];
    }

    int countPartitions(vector<int>& arr, int d) {
        int total = accumulate(arr.begin(), arr.end(), 0);
        if ((total + d) % 2 != 0 || total < d) return 0;

        int target = (total + d) / 2;
        vector<vector<int>> dp(arr.size(), vector<int>(target + 1, -1));
        return solve(arr, target, 0, dp);
    }
};
