Recursive->

int countSubsequences(vector<int>& arr, int i, int target) {
    if (i == arr.size()) {
        if (target == 0) return 1;
        return 0;
    }


    if (arr[i] <= target) {
        return countSubsequences(arr, i + 1, target - arr[i]) + countSubsequences(arr, i + 1, target);          
    } else {
        return countSubsequences(arr, i + 1, target);         
    }
}




Memoization->

int countSubsequencesMemo(vector<int>& arr, int i, int target, vector<vector<int>>& dp) {
     if (i == arr.size()) {
        if (target == 0) return 1;
        return 0;
    }

    if (dp[i][target] != -1) return dp[i][target];

    if (arr[i] <= target) {
        dp[i][target] = countSubsequencesMemo(arr, i + 1, target - arr[i], dp) + countSubsequencesMemo(arr, i + 1, target, dp);
    } else {
        dp[i][target] = countSubsequencesMemo(arr, i + 1, target, dp);
    }

    return dp[i][target];
}
